@page "/coursework"
<PageTitle>Coursework</PageTitle>

<style>
  .toggle-buttons {
    margin-bottom: 1rem;
    display: flex;
    gap: 0.5rem;
  }

  .ranked-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 2rem;
    margin-top: 1rem;
  }
  .ranked-column h3 {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
  }
  .ranked-column ol {
    padding-left: 1.25rem;
  }
  .ranked-column li {
    margin-bottom: 0.75rem;
  }
  .ranked-column .description {
    font-size: 0.9rem;
    color: #333;
    margin-top: 0.25rem;
  }

  .semester-header {
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-size: 1.4rem;
    color: #333;
  }
  .semester-courses {
    list-style-type: none;
    padding-left: 0;
  }
  .course-item {
    margin-bottom: 1rem;
  }
  .course-item h3 {
    font-size: 1.1rem;
    margin: 0;
  }
  .course-item p {
    margin: 0.25rem 0 0;
    font-size: 0.95rem;
    color: #333;
  }
</style>

<section class="course-list">
  <h1>Thoughts on some of my Techs</h1>

  <div class="toggle-buttons">
    <button class="win98-button"
            disabled="@showSemesterView"
            @onclick="() => showSemesterView = true">
      By Semester
    </button>
    <button class="win98-button"
            disabled="@(showSemesterView == false)"
            @onclick="() => showSemesterView = false">
      Ranked Lists
    </button>
  </div>

  @if (showSemesterView)
  {
    @* semester view, sorted newest first *@
    @foreach (var semester in coursesBySemester
      .OrderByDescending(kvp => int.Parse(kvp.Key.Split(' ')[1]))
      .ThenByDescending(kvp => seasonOrder[kvp.Key.Split(' ')[0]]) 
    )
    {
      <div class="semester-section">
        <h3 class="semester-header">@semester.Key</h3>
        <ul class="semester-courses">
          @foreach (var course in semester.Value)
          {
            <li class="course-item">
              <h3>
                @if (!string.IsNullOrWhiteSpace(course.NotesLink))
                {
                  <a href="@course.NotesLink" target="_blank">@course.Name</a>
                }
                else
                {
                  @course.Name
                }
              </h3>
              @if (!string.IsNullOrWhiteSpace(course.Description))
              {
                <p>@course.Description</p>
              }
            </li>
          }
        </ul>
      </div>
    }
  }
  else
  {
    @* ranked list view *@
    <div class="ranked-grid">
      @foreach (var category in rankingLists.Keys)
      {
        <div class="ranked-column">
          <h3>@category</h3>
          <ol>
            @foreach (var item in rankingLists[category])
            {
              <li>
                @item.Name
                @if (!string.IsNullOrWhiteSpace(item.Description))
                {
                  <div class="description">@item.Description</div>
                }
              </li>
            }
          </ol>
        </div>
      }
    </div>
  }
</section>

@code {
  // toggle state
  private bool showSemesterView = true;

  // map seasons to sort order
  private static readonly Dictionary<string,int> seasonOrder = new()
  {
    ["Spring"] = 1,
    ["Fall"]   = 2
  };

  public record Course(string Name, string Description, string NotesLink);

  // semester data
  private readonly Dictionary<string, List<Course>> coursesBySemester = new()
  {
    ["Fall 2025"] = new() {
      new("CS 172: Computability and Complexity",
          "",
          ""),
      new("CS 189: Machine Learning",
          "",
          ""),
      new("CS 164: Compilers",
          "",
          "")
    },
    ["Spring 2025"] = new() {
      new("CS 162: Operating Systems and System Programming",
          "",
          ""),
      new("CS 188: Artificial Intelligence",
          "",
          ""),
      new("ECON C103: Mathematical Economics",
          "",
          "")
    },
    ["Fall 2024"] = new() {
      new("EECS 126: Probability and Random Processes",
          "",
          ""),
      new("CS 170: Efficient Algorithms and Intractable Problems",
          "",
          ""),
      new("CS 61c: Machine Structures",
          "",
          "")
    },
    ["Spring 2024"] = new() {
      new("CS 70: Discrete Mathematics and Probability Theory",
          "",
          ""),
      new("CS 61b: Data Structures",
          "",
          ""),
      new("EECS 16b: Designing Information Devices and Systems II",
          "",
          "")
    },
    ["Fall 2023"] = new() {
      new("CS 61a: The Structure and Interpretation of Computer Programs",
          "",
          ""),
      new("EECS 16a: Designing Information Devices and Systems I",
          "",
          ""),
      new("Physics 7b: Thermodynamics, Electricity & Magnetism",
          "",
          "")
    }
  };

  private readonly Dictionary<string, List<Course>> rankingLists = new()
  {
    ["Favorite"] = new() {
    new("EECS 126: Probability and Random Processes", 
        "", ""),
    new("Physics 7b: Thermo, E&M", 
        "", ""),
    new("CS 61c: Machine Structures", 
        "", ""),
    new("CS 188: Artificial Intelligence", 
        "", ""),
    new("EECS 16b: DIDS II",
        "", "")
    },
    ["Most Useful"] = new() {
      new("CS 61c: Machine Structures", 
          "", ""),
      new("CS 162: Operating Systems", 
          "", ""),
      new("EECS 126: Probability", 
          "", ""),
      new("CS 170: Efficient Algorithms and Intractable Problems", 
          "", ""),
      new("EECS 16b: DIDS II", 
          "", "")
    },
    ["Hardest"] = new() {
        new("CS 162: Operating Systems and System Programming", 
          "", ""),
        new("CS 170: Efficient Algorithms and Intractable Problems", 
          "", ""),
        new("EECS 16a: DIDS I",
          "", ""),
        new("CS 61c: Machine Structures", 
          "", ""),
        new("CS 61b: Data Structures", 
          "", "")
    }
  };
}
